Title: Simple responsive CSS Grid

----

Text:

(link: https://photon-11ty.netlify.app text: The main overview page) of (link: https://github.com/usephoton/photon-11ty text: Photon 11ty) is a simple grid of image squares, nothing more. In modern frontend development times, I wanted to use (link: https://developer.mozilla.org/de/docs/Web/CSS/CSS_Grid_Layout text: CSS Grid) to help me with the grid layout.

In the past, I only used CSS Grid occasionally. While it was very helpful to solve some layout problems, it sometimes felt a bit redundant. Especially when it comes to repetitive responsive settings.

My first attempt towards building this photo grid layout was similar to my previous attempts using css grids. It felt a bit strict and not flexible. After some research, I came across a rather perfect way of defining the grid items. Now the browser would do all the heavy lifting:

```css
.photo-grid {
	display: grid;
	grid-gap: 16px;
	grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
}
```

Cool, but what does this mean?

1. Create a grid
2. Set the gap between each column and row to 16px
3. Set the minimum width of every column to 400px
4. Every column should have the same width
5. Fill the grid container with as many columns as possible

This is the perfect way of handling this grid. It is pure flexibility while also depending on a reasonable minimum size of all its children.

One recent article on (link: https://css-tricks.com text: CSS-Tricks) called (link: https://css-tricks.com/thinking-in-behaviors-not-screen-sizes/ text: Thinking in Behaviors, Not Screen Sizes) describes a very similar example. The notion of thinking more in behaviors rather than breakpoints is a perfect summary of this neat way of handling grids.

----

Images: 

----

Date: 2020-05-28 17:00:00

----

Tags: 11ty

----

Likes: b3f581b8fd774124af5c3b8e305b0931;cd9dc971a99fc8f0c969d2312147ddb5;ee373d8c71899c2034de31b790a801cf;22a5506ca036c25e87c85efe011f05d8;62d829e0ede2c65da703339acd0a0d49;78b76121d4cec7acefd79745cdd2d0b9;c9639a28506e7cb64e1c7adeeb66dac6;8b9c19f31abaa7c5b4e1a6098228cfff;49165224344347b306bcef9e89e937f6;40564ecc38e25aaf1e047aecc3aa5336;a2c6fc7e98c6a02b63073b79a0326962;ed743d5d2a6ca4495df0d45bdb2863a6;88e810d41704c49654c3427381ad1ae0;e2194b4be5fb34ffb85e397cad0a97d6;b58c7a132b2cf4c9774dac9ed4f3c607;8ebcc93bbc43d9f25f169e16f2a25bb6;5f4be53d5f8750e3584c6697dada9e1e;f8b6c30ec26b541875e450ad0d709c04;

----

Meta-title: 

----

Meta-description: 

----

Meta-keywords: 

----

Meta-canonical-url: 

----

Meta-author: 

----

Meta-image: 

----

Meta-phone-number: 

----

Og-title: 

----

Og-description: 

----

Og-image: 

----

Og-site-name: 

----

Og-url: 

----

Og-audio: 

----

Og-video: 

----

Og-determiner: 

----

Og-type: 

----

Og-type-article-published-time: 

----

Og-type-article-modified-time: 

----

Og-type-article-expiration-time: 

----

Og-type-article-author: 

----

Og-type-article-section: 

----

Og-type-article-tag: 

----

Twitter-title: 

----

Twitter-description: 

----

Twitter-image: 

----

Twitter-card-type: 

----

Twitter-site: 

----

Twitter-creator: 

----

Robots-noindex: 

----

Robots-nofollow: 

----

Robots-noarchive: 

----

Robots-noimageindex: 

----

Robots-nosnippet: 